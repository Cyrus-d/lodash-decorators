{"version":3,"file":"bind.js","sourceRoot":"","sources":["../src/bind.ts"],"names":[],"mappings":";;AAAA,uCAAiC;AAEjC,qCAAuF;AACvF,6CAA+C;AAE/C;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACU,QAAA,IAAI,GAAG,0BAAgB,CAAC,uBAAuB,CAC1D,IAAI,yBAAe,CAAC,gBAAI,EAAE,IAAI,4BAAc,EAAE,EAAE;IAC9C,cAAc,EAAE,IAAI;CACrB,CAAC,CAC6B,CAAC;AACjB,eALJ,YAAI,CAKI;AACrB,kBAAe,YAAI,CAAC","sourcesContent":["import { bind } from 'lodash-es';\r\n\r\nimport { DecoratorConfig, DecoratorFactory, BiTypedMethodDecorator1 } from './factory';\r\nimport { BindApplicator } from './applicators';\r\n\r\n/**\r\n * Creates a function that invokes func with the this binding of thisArg and partials prepended to the arguments it receives.\r\n *\r\n * The _.bind.placeholder value, which defaults to _ in monolithic builds, may be used as a placeholder for partially applied arguments.\r\n *\r\n * Note: Unlike native Function#bind, this method doesn't set the \"length\" property of bound functions.\r\n * @param {...*} [partials] The argument to be partially applied.\r\n * @example\r\n *\r\n * class MyClass {\r\n *   @Bind()\r\n *   bound() {\r\n *     return this;\r\n *   }\r\n *\r\n *   unbound() {\r\n *     return this;\r\n *   }\r\n * }\r\n *\r\n * const myClass = new MyClass();\r\n *\r\n * myClass.bound.call(null); // => myClass {}\r\n * myClass.unbound.call(null); // => null\r\n */\r\nexport const Bind = DecoratorFactory.createInstanceDecorator(\r\n  new DecoratorConfig(bind, new BindApplicator(), {\r\n    optionalParams: true\r\n  })\r\n) as BiTypedMethodDecorator1<any>;\r\nexport { Bind as bind, };\r\nexport default Bind;\r\n"]}