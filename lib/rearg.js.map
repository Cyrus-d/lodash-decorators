{"version":3,"file":"rearg.js","sourceRoot":"","sources":["../src/rearg.ts"],"names":[],"mappings":";;AAAA,uCAAkC;AAClC,qCAKmB;AACnB,6CAAuD;AAEvD,IAAM,SAAS,GAAG,0BAAgB,CAAC,uBAAuB,CACxD,IAAI,yBAAe,CAAC,iBAAK,EAAE,IAAI,oCAAsB,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAC7E,CAAC;AAEF,eAAsB,OAA+C;IAAE,cAAiC;SAAjC,UAAiC,EAAjC,qBAAiC,EAAjC,IAAiC;QAAjC,6BAAiC;;IACtG,MAAM,CAAC,SAAS,gBAAC,OAAO,SAAK,IAAI,GAAE;AACrC,CAAC;AAFD,sBAEC;AACiB,sBAAK;AACvB,kBAAe,SAAS,CAAC","sourcesContent":["import { rearg } from 'lodash-es';\r\nimport {\r\n  DecoratorConfig,\r\n  DecoratorFactory,\r\n  LodashDecorator,\r\n  ResolvableFunction\r\n} from './factory';\r\nimport { PartialValueApplicator } from './applicators';\r\n\r\nconst decorator = DecoratorFactory.createInstanceDecorator(\r\n  new DecoratorConfig(rearg, new PartialValueApplicator(), { property: true })\r\n);\r\n\r\nexport function Rearg(indexes: ResolvableFunction | number | number[], ...args: Array<number | number[]>): LodashDecorator {\r\n  return decorator(indexes, ...args);\r\n}\r\nexport { Rearg as rearg };\r\nexport default decorator;\r\n"]}