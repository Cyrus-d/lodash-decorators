{"version":3,"file":"curry.js","sourceRoot":"","sources":["../src/curry.ts"],"names":[],"mappings":";;AAAA,uCAAkC;AAClC,qCAAuF;AACvF,6CAAmD;AAEnD;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AACU,QAAA,KAAK,GAAG,0BAAgB,CAAC,uBAAuB,CAC3D,IAAI,yBAAe,CAAC,iBAAK,EAAE,IAAI,gCAAkB,EAAE,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CACzD,CAAC;AACnB,gBAHL,aAAK,CAGK;AACvB,kBAAe,aAAK,CAAC","sourcesContent":["import { curry } from 'lodash-es';\r\nimport { DecoratorConfig, DecoratorFactory, BiTypedMethodDecorator1 } from './factory';\r\nimport { PreValueApplicator } from './applicators';\r\n\r\n/**\r\n * Creates a function that accepts arguments of func and either invokes func returning its result, if at least arity number of arguments have been provided, or returns a function that accepts the remaining func arguments, and so on.\r\n * The arity of func may be specified if func.length is not sufficient.\r\n * The original function is bound to the instance. If the method is needed to call in a different context use `CurryAll`.\r\n *\r\n * The _.curry.placeholder value, which defaults to _ in monolithic builds, may be used as a placeholder for provided arguments.\r\n *\r\n * Note: This method doesn't set the \"length\" property of curried functions.\r\n * @param {number} [arity] The arity of func.\r\n * @example\r\n *\r\n * class MyClass {\r\n *   multiplier = 2;\r\n *\r\n *   @Curry()\r\n *   add(a, b) {\r\n *     return (a + b) * this.multiplier;\r\n *   }\r\n * }\r\n *\r\n * const myClass = new MyClass();\r\n *\r\n * const add5 = myClass.add(5);\r\n *\r\n * add5AndMultiply(10); // => 30\r\n */\r\nexport const Curry = DecoratorFactory.createInstanceDecorator(\r\n  new DecoratorConfig(curry, new PreValueApplicator(), { bound: true, optionalParams: true })\r\n) as BiTypedMethodDecorator1<number>;\r\nexport { Curry as curry };\r\nexport default Curry;\r\n"]}