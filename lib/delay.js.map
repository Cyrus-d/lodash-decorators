{"version":3,"file":"delay.js","sourceRoot":"","sources":["../src/delay.ts"],"names":[],"mappings":";;AAAA,uCAAkC;AAClC,qCAAqF;AACrF,6CAAmD;AAEnD,IAAM,SAAS,GAAG,0BAAgB,CAAC,eAAe,CAChD,IAAI,yBAAe,CACjB,UAAS,KAAe,EAAE,IAAY;IAAE,cAAc;SAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;QAAd,6BAAc;;IACpD,OAAO;QAAS,oBAAoB;aAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;YAApB,+BAAoB;;QAClC,OAAO,iBAAK,gBAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,SAAK,UAAU,EAAK,IAAI,GAAE;IAC/D,CAAC,CAAC;AACJ,CAAC,EACD,IAAI,gCAAkB,EAAE,EACxB,EAAE,MAAM,EAAE,IAAI,EAAE,CACjB,CACF,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AACH,eAAsB,IAAY;IAAE,cAAc;SAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;QAAd,6BAAc;;IAChD,OAAO,SAAS,gBAAC,IAAI,SAAK,IAAI,GAAE;AAClC,CAAC;AAFD,sBAEC;AACiB,sBAAK;AACvB,kBAAe,SAAS,CAAC","sourcesContent":["import { delay } from 'lodash-es';\r\nimport { DecoratorConfig, DecoratorFactory, LodashMethodDecorator } from './factory';\r\nimport { PreValueApplicator } from './applicators';\r\n\r\nconst decorator = DecoratorFactory.createDecorator(\r\n  new DecoratorConfig(\r\n    function(value: Function, wait: number, ...args: any[]) {\r\n      return function(...invokeArgs: any[]): any {\r\n        return delay(value.bind(this), wait, ...invokeArgs, ...args);\r\n      };\r\n    },\r\n    new PreValueApplicator(),\r\n    { setter: true }\r\n  )\r\n);\r\n\r\n/**\r\n * Invokes func after wait milliseconds. Any additional arguments are provided to func when it's invoked.\r\n *\r\n * @param {number} wait The number of milliseconds to delay invocation.\r\n * @param {...*} [args] Additional arguments to invoke the function with\r\n * @example\r\n *\r\n * class MyClass {\r\n *   value = 100;\r\n *\r\n *   @Delay(20)\r\n *   add(a) {\r\n *     this.value += a;\r\n *   }\r\n * }\r\n *\r\n * const myClass = new MyClass();\r\n *\r\n * myClass.add(10);\r\n *\r\n * myClass.value; // => 100;\r\n *\r\n * setTimeout(() => {\r\n *   myClass.value; // => 110;\r\n * }, 30);\r\n */\r\nexport function Delay(wait: number, ...args: any[]): LodashMethodDecorator {\r\n  return decorator(wait, ...args);\r\n}\r\nexport { Delay as delay };\r\nexport default decorator;\r\n"]}