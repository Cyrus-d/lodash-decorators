{"version":3,"file":"attempt.js","sourceRoot":"","sources":["../src/attempt.ts"],"names":[],"mappings":";;AAAA,uCAA6C;AAE7C,qCAAsF;AACtF,6CAAmD;AAEnD,IAAM,SAAS,GAAG,UAAC,EAAc,IAAK,OAAA,mBAAO,CAAC,mBAAO,EAAE,EAAE,CAAC,EAApB,CAAoB,CAAC;AAE3D;;;;;;;;;;;;;;;;;;;;GAoBG;AACU,QAAA,OAAO,GAAG,0BAAgB,CAAC,eAAe,CACrD,IAAI,yBAAe,CAAC,SAAS,EAAE,IAAI,gCAAkB,EAAE,EAAE;IACvD,cAAc,EAAE,IAAI;CACrB,CAAC,CACuB,CAAC;AACR,kBALP,eAAO,CAKO;AAC3B,kBAAe,eAAO,CAAC","sourcesContent":["import { attempt, partial } from 'lodash-es';\r\n\r\nimport { DecoratorConfig, DecoratorFactory, BiTypedMethodDecorator } from './factory';\r\nimport { PreValueApplicator } from './applicators';\r\n\r\nconst attemptFn = (fn: () => void) => partial(attempt, fn);\r\n\r\n/**\r\n * Attempts to invoke func, returning either the result or the caught error object. Any additional arguments are provided to func when it's invoked.\r\n * @param {...*} [args] The arguments to invoke func with.\r\n * @example\r\n *\r\n * class MyClass {\r\n *   @Attempt()\r\n *   fn(value) {\r\n *     if (typeof value === 'number') {\r\n *       return value\r\n *     }\r\n *\r\n *     throw new Error();\r\n *   }\r\n * }\r\n *\r\n * const myClass = new MyClass();\r\n *\r\n * myClass.fn(10); // => 10;\r\n * myClass.fn(null); // => Error\r\n */\r\nexport const Attempt = DecoratorFactory.createDecorator(\r\n  new DecoratorConfig(attemptFn, new PreValueApplicator(), {\r\n    optionalParams: true\r\n  })\r\n) as BiTypedMethodDecorator;\r\nexport { Attempt as attempt };\r\nexport default Attempt;\r\n"]}