{"version":3,"file":"curryAll.js","sourceRoot":"","sources":["../src/curryAll.ts"],"names":[],"mappings":";;AAAA,uCAAkC;AAClC,qCAAiF;AACjF,6CAAmD;AAEnD;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACU,QAAA,QAAQ,GAAG,0BAAgB,CAAC,eAAe,CACtD,IAAI,yBAAe,CAAC,iBAAK,EAAE,IAAI,gCAAkB,EAAE,EAAE,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CAClD,CAAC;AACV,mBAHR,gBAAQ,CAGQ;AAC7B,kBAAe,gBAAQ,CAAC","sourcesContent":["import { curry } from 'lodash-es';\r\nimport { DecoratorConfig, DecoratorFactory, BiTypedDecorator1 } from './factory';\r\nimport { PreValueApplicator } from './applicators';\r\n\r\n/**\r\n * Creates a function that accepts arguments of func and either invokes func returning its result, if at least arity number of arguments have been provided, or returns a function that accepts the remaining func arguments, and so on.\r\n * The arity of func may be specified if func.length is not sufficient.\r\n *\r\n * The _.curry.placeholder value, which defaults to _ in monolithic builds, may be used as a placeholder for provided arguments.\r\n *\r\n * Note: This method doesn't set the \"length\" property of curried functions.\r\n * Note: The original function invoked will not be called in the context of the instance. Use `Curry` to for using it bound.\r\n * @param {number} [arity] The arity of func.\r\n * @example\r\n *\r\n * class MyClass {\r\n *   @CurryAll()\r\n *   add(a, b) {\r\n *     return (a + b);\r\n *   }\r\n * }\r\n *\r\n * const myClass = new MyClass();\r\n *\r\n * const add5 = myClass.add(5);\r\n *\r\n * add5AndMultiply(10); // => 15\r\n */\r\nexport const CurryAll = DecoratorFactory.createDecorator(\r\n  new DecoratorConfig(curry, new PreValueApplicator(), { optionalParams: true })\r\n) as BiTypedDecorator1<number>;\r\nexport { CurryAll as curryAll };\r\nexport default CurryAll;\r\n"]}