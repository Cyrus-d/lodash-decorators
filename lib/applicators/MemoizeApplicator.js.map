{"version":3,"file":"MemoizeApplicator.js","sourceRoot":"","sources":["../../src/applicators/MemoizeApplicator.ts"],"names":[],"mappings":";;;AAAA,uCAAiD;AAEjD,2CAA4D;AAC5D,kCAA2C;AAE3C;IAAuC,6CAAU;IAAjD;;IA2BA,CAAC;IA1BC,iCAAK,GAAL,UAAM,EAAwE;YAAtE,gBAAK,EAAE,sBAAQ,EAAY,2BAAO,EAAI,cAAI,EAAE,kBAAM;QACxD,IAAI,QAAQ,GAAG,uBAAe,CAC5B,sBAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,oBAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,EAC9E,QAAQ,EACR,MAAM,EACN,KAAK,CACN,CAAC;QAEF,EAAE,CAAC,CAAC,QAAQ,IAAI,QAAQ,CAAC,CAAC,CAAC;YACzB,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACrC,CAAC;QAED,IAAM,QAAQ,GAAG,QAAQ,GAAG,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;QAEtE,EAAE,CAAC,CAAC,oBAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAChB,IAAA,YAAyB,EAAvB,gBAAK,EAAE,cAAI,CAAa;YAEhC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACV,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;YACzB,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,sBAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC5B,QAAQ,CAAC,KAAK,GAAG,IAAK,IAAY,EAAE,CAAC;YACvC,CAAC;QACH,CAAC;QAED,MAAM,CAAC,QAAQ,CAAC;IAClB,CAAC;IACH,wBAAC;AAAD,CAAC,AA3BD,CAAuC,uBAAU,GA2BhD;AA3BY,8CAAiB","sourcesContent":["import { isFunction, isObject } from 'lodash-es';\r\n\r\nimport { Applicator, ApplicateOptions } from './Applicator';\r\nimport { resolveFunction } from '../utils';\r\n\r\nexport class MemoizeApplicator extends Applicator {\r\n  apply({ value, instance, config: { execute }, args, target }: ApplicateOptions): any {\r\n    let resolver = resolveFunction(\r\n      isFunction(args[0]) ? args[0] : isObject(args[0]) ? args[0].resolver : args[0],\r\n      instance,\r\n      target,\r\n      false\r\n    );\r\n\r\n    if (resolver && instance) {\r\n      resolver = resolver.bind(instance);\r\n    }\r\n\r\n    const memoized = resolver ? execute(value, resolver) : execute(value);\r\n\r\n    if (isObject(args[0])) {\r\n      const { cache, type } = args[0];\r\n\r\n      if (cache) {\r\n        memoized.cache = cache;\r\n      } else if (isFunction(type)) {\r\n        memoized.cache = new (type as any)();\r\n      }\r\n    }\r\n\r\n    return memoized;\r\n  }\r\n}\r\n"]}