{"version":3,"file":"negate.js","sourceRoot":"","sources":["../src/negate.ts"],"names":[],"mappings":";;AAAA,uCAAmC;AACnC,qCAKmB;AACnB,6CAAuD;AAEvD;;;;;;;;;;;;;;;;;GAiBG;AACU,QAAA,MAAM,GAAG,0BAAgB,CAAC,uBAAuB,CAC5D,IAAI,yBAAe,CAAC,kBAAM,EAAE,IAAI,oCAAsB,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CAC3D,CAAC;AACxB,iBAHN,cAAM,CAGM;AACzB,kBAAe,cAAM,CAAC","sourcesContent":["import { negate } from 'lodash-es';\r\nimport {\r\n  DecoratorConfig,\r\n  DecoratorFactory,\r\n  ResolvableFunction,\r\n  BiTypedDecorator1\r\n} from './factory';\r\nimport { PartialValueApplicator } from './applicators';\r\n\r\n/**\r\n * Negates a functions result or, when used on a property, creates a function that\r\n * negates the result of a provided function.\r\n * @param {ResolvableFunction} [fn] A resolvable function.\r\n * @example\r\n * class MyClass {\r\n *   @Negate('fn')\r\n *   fn2: () => boolean;\r\n *\r\n *   fn(): boolean {\r\n *     return true;\r\n *   }\r\n * }\r\n *\r\n * const myClass = new MyClass();\r\n *\r\n * myClass.fn2(); //=> false\r\n */\r\nexport const Negate = DecoratorFactory.createInstanceDecorator(\r\n  new DecoratorConfig(negate, new PartialValueApplicator(), { property: true, optionalParams: true })\r\n) as BiTypedDecorator1<ResolvableFunction>;\r\nexport { Negate as negate };\r\nexport default Negate;\r\n"]}