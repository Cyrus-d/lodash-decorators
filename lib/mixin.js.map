{"version":3,"file":"mixin.js","sourceRoot":"","sources":["../src/mixin.ts"],"names":[],"mappings":";;AAAA,uCAAmC;AACnC;;;;;;;;;;;;;;;;;GAiBG;AACH;IAAsB,cAAiB;SAAjB,UAAiB,EAAjB,qBAAiB,EAAjB,IAAiB;QAAjB,yBAAiB;;IACrC,MAAM,CAAC,CAAC,UAAC,MAAgB;QACvB,kBAAM,gBAAC,MAAM,CAAC,SAAS,SAAK,IAAI,GAAE;QAElC,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC,CAAQ,CAAC;AACZ,CAAC;AAND,sBAMC;AACiB,sBAAK;AACvB,kBAAe,KAAK,CAAC","sourcesContent":["import { assign } from 'lodash-es';\r\n/**\r\n * Mixins an object into the classes prototype.\r\n * @export\r\n * @param {...Object[]} srcs\r\n * @returns {ClassDecorator}\r\n * @example\r\n *\r\n * const myMixin = {\r\n *   blorg: () => 'blorg!'\r\n * }\r\n *\r\n * @Mixin(myMixin)\r\n * class MyClass {}\r\n *\r\n * const myClass = new MyClass();\r\n *\r\n * myClass.blorg(); // => 'blorg!'\r\n */\r\nexport function Mixin(...srcs: Object[]): ClassDecorator {\r\n  return ((target: Function) => {\r\n    assign(target.prototype, ...srcs);\r\n\r\n    return target;\r\n  }) as any;\r\n}\r\nexport { Mixin as mixin };\r\nexport default Mixin;\r\n"]}