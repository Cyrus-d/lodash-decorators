{"version":3,"file":"memoizeAll.js","sourceRoot":"","sources":["../src/memoizeAll.ts"],"names":[],"mappings":";;AAAA,uCAAoC;AACpC,qCAAuF;AACvF,6CAAkD;AAGlD;;;GAGG;AACU,QAAA,UAAU,GAAG,0BAAgB,CAAC,eAAe,CACxD,IAAI,yBAAe,CAAC,mBAAO,EAAE,IAAI,+BAAiB,EAAE,EAAE,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CACjB,CAAC;AAC1C,qBAHV,kBAAU,CAGU;AACjC,kBAAe,kBAAU,CAAC","sourcesContent":["import { memoize } from 'lodash-es';\r\nimport { DecoratorConfig, DecoratorFactory, BiTypedMethodDecorator1 } from './factory';\r\nimport { MemoizeApplicator } from './applicators';\r\nimport { MemoizeConfig } from './shared';\r\n\r\n/**\r\n * Memoizes a function on the prototype instead of the instance. All instances of the class use the same memoize cache.\r\n * @param {Function} [resolver] Optional resolver\r\n */\r\nexport const MemoizeAll = DecoratorFactory.createDecorator(\r\n  new DecoratorConfig(memoize, new MemoizeApplicator(), { optionalParams: true })\r\n) as BiTypedMethodDecorator1<Function | MemoizeConfig<any, any>>;\r\nexport { MemoizeAll as memoizeAll };\r\nexport default MemoizeAll;\r\n"]}