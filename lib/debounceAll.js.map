{"version":3,"file":"debounceAll.js","sourceRoot":"","sources":["../src/debounceAll.ts"],"names":[],"mappings":";;AAAA,uCAAqC;AACrC,qCAAqF;AACrF,6CAAmD;AAGnD,IAAM,SAAS,GAAG,0BAAgB,CAAC,eAAe,CAChD,IAAI,yBAAe,CAAC,oBAAQ,EAAE,IAAI,gCAAkB,EAAE,CAAC,CACxD,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoCG;AACH,qBAA4B,IAAa,EAAE,OAAyB;IAClE,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AAClC,CAAC;AAFD,kCAEC;AACuB,kCAAW;AACnC,kBAAe,SAAS,CAAC","sourcesContent":["import { debounce } from 'lodash-es';\r\nimport { DecoratorConfig, DecoratorFactory, LodashMethodDecorator } from './factory';\r\nimport { PreValueApplicator } from './applicators';\r\nimport { DebounceOptions } from './shared';\r\n\r\nconst decorator = DecoratorFactory.createDecorator(\r\n  new DecoratorConfig(debounce, new PreValueApplicator())\r\n);\r\n\r\n/**\r\n * Creates a debounced function that delays invoking func until after wait milliseconds have elapsed since the last time the debounced function was invoked.\r\n * The debounced function comes with a cancel method to cancel delayed func invocations and a flush method to immediately invoke them.\r\n * Provide options to indicate whether func should be invoked on the leading and/or trailing edge of the wait timeout. The func is invoked with the last arguments provided to the debounced function.\r\n * Subsequent calls to the debounced function return the result of the last func invocation.\r\n *\r\n * The debounce state is shared across all instances of the class.\r\n *\r\n * Note: If leading and trailing options are true, func is invoked on the trailing edge of the timeout only if the debounced function is invoked more than once during the wait timeout.\r\n *\r\n * If wait is 0 and leading is false, func invocation is deferred until to the next tick, similar to setTimeout with a timeout of 0.\r\n *\r\n * @param {number} [wait=0] The number in milliseconds to delay.\r\n * @param {DebounceOptions} [options] The options object.\r\n * @example\r\n *\r\n * class MyClass {\r\n *   value = 100;\r\n *\r\n *   @DebounceAll(10)\r\n *   add(a) {\r\n *     this.value += a;\r\n *   }\r\n * }\r\n *\r\n * const myClass = new MyClass();\r\n *\r\n * myClass.add(10);\r\n * myClass.add(50);\r\n * myClass.add(20);\r\n *\r\n * myClass.value; // => 100;\r\n *\r\n * setTimeout(() => {\r\n *   myClass.value; // => 120;\r\n * }, 11);\r\n */\r\nexport function DebounceAll(wait?: number, options?: DebounceOptions): LodashMethodDecorator {\r\n  return decorator(wait, options);\r\n}\r\nexport { DebounceAll as debounceAll };\r\nexport default decorator;\r\n"]}