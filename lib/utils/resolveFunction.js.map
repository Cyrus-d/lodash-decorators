{"version":3,"file":"resolveFunction.js","sourceRoot":"","sources":["../../src/utils/resolveFunction.ts"],"names":[],"mappings":";;AACA,uCAAiD;AACjD,6BAA4B;AAE5B;;;;;;;;;EASE;AAEF,yBAAgC,MAA0B,EAAE,OAAa,EAAE,MAAY,EAAE,aAA6B;IAA7B,8BAAA,EAAA,oBAA6B;IACpH,IAAI,sBAAU,CAAC,MAAM,CAAC,EAAE;QACtB,OAAO,MAAM,CAAC;KACf;SAAM,IAAI,oBAAQ,CAAC,MAAM,CAAC,EAAE;QAC3B,aAAa;QACb,IAAI,OAAO,IAAI,sBAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE;YAC1C,aAAa;YACb,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC;YACvB,aAAa;SACd;aAAM,IAAI,MAAM,IAAI,sBAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE;YAC/C,aAAa;YACb,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC;SACvB;KACF;IAED,IAAI,aAAa,EAAE;QACjB,MAAM,IAAI,cAAc,CAAC,SAAG,CAAC,4BAA0B,MAAM,2BAAwB,CAAC,CAAC,CAAC;KACzF;AACH,CAAC;AAlBD,0CAkBC","sourcesContent":["\r\nimport { isFunction, isString } from 'lodash-es';\r\nimport { log } from './log';\r\n\r\n/*\r\n   Resolves a function on the current target object. It first will\r\n   try and resolve on the context object, then the target object,\r\n   then an error will be thrown if the method can not be resolved.\r\n   @private\r\n   @param {Function|string} method The method or method name.\r\n   @param {Object} [context] The context object to resolve from.\r\n   @param {Object} [target] The target object to resolve from.\r\n   @returns {Function} The resolved function.\r\n*/\r\n\r\nexport function resolveFunction(method?: string | Function, context?: any, target?: any, throwNotFound: boolean = true): any {\r\n  if (isFunction(method)) {\r\n    return method;\r\n  } else if (isString(method)) {\r\n    // @ts-ignore\r\n    if (context && isFunction(context[method])) {\r\n      // @ts-ignore\r\n      return context[method];\r\n      // @ts-ignore\r\n    } else if (target && isFunction(target[method])) {\r\n      // @ts-ignore\r\n      return target[method];\r\n    }\r\n  }\r\n\r\n  if (throwNotFound) {\r\n    throw new ReferenceError(log(`Can not resolve method ${method} on any target Objects`));\r\n  }\r\n}\r\n"]}