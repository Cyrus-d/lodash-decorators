{"version":3,"file":"wrapConstructor.js","sourceRoot":"","sources":["../../src/utils/wrapConstructor.ts"],"names":[],"mappings":";;AAAA,yCAAwC;AAExC,IAAM,iBAAiB,GAAG;IACxB,QAAQ;IACR,MAAM;IACN,WAAW;IACX,QAAQ;IACR,WAAW;CACZ,CAAC;AAEF;;;;;;;GAOG;AACH,yBAAgC,IAAc,EAAE,OAAgD;IAC9F;QAA4B,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,yBAAc;;QACxC,MAAM,CAAC,OAAO,CAAC,IAAI,OAAZ,OAAO,GAAM,IAAI,EAAE,IAAI,SAAK,IAAI,GAAE;IAC3C,CAAC;IAED,kBAAkB,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;IAC9C,MAAM,CAAC,cAAc,CAAC,kBAAkB,EAAE,MAAM,EAAE;QAChD,8EAA8E;QAC9E,YAAY,EAAE,IAAI;QAClB,UAAU,EAAE,KAAK;QACjB,KAAK,EAAE,IAAI,CAAC,IAAI;QAChB,QAAQ,EAAE,KAAK;KAChB,CAAC,CAAC;IAEH,MAAM,CAAC,qBAAS,CAAC,kBAAkB,EAAE,IAAI,EAAE,iBAAiB,CAAC,CAAC;AAChE,CAAC;AAfD,0CAeC","sourcesContent":["import { assignAll } from './assignAll';\r\n\r\nconst PROPERTY_EXCLUDES = [\r\n  'length',\r\n  'name',\r\n  'arguments',\r\n  'called',\r\n  'prototype'\r\n];\r\n\r\n/**\r\n * Wraps a constructor in a wrapper function and copies all static properties\r\n * and methods to the new constructor.\r\n * @export\r\n * @param {Function} Ctor\r\n * @param {(Ctor: Function, ...args: any[]) => any} wrapper\r\n * @returns {Function}\r\n */\r\nexport function wrapConstructor(Ctor: Function, wrapper: (Ctor: Function, ...args: any[]) => any): Function {\r\n  function ConstructorWrapper(...args: any[]) {\r\n    return wrapper.call(this, Ctor, ...args);\r\n  }\r\n\r\n  ConstructorWrapper.prototype = Ctor.prototype;\r\n  Object.defineProperty(ConstructorWrapper, 'name', {\r\n    // These values should coincide with the default descriptor values for `name`.\r\n    configurable: true,\r\n    enumerable: false,\r\n    value: Ctor.name,\r\n    writable: false\r\n  });\r\n\r\n  return assignAll(ConstructorWrapper, Ctor, PROPERTY_EXCLUDES);\r\n}\r\n"]}