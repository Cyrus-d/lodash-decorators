{"version":3,"file":"assignAll.js","sourceRoot":"","sources":["../../src/utils/assignAll.ts"],"names":[],"mappings":";;AAAA,uCAAuD;AACvD;;;;;;;;;;GAUG;AACH,mBAAgC,EAAK,EAAE,IAAO,EAAE,QAAuB;IAAvB,yBAAA,EAAA,aAAuB;IACrE,IAAM,UAAU,GAAG,mBAAO,gBAAC,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,SAAK,QAAQ,EAAC,CAAC;IAE1E,KAAmB,UAAU,EAAV,yBAAU,EAAV,wBAAU,EAAV,IAAU,EAAE;QAA1B,IAAM,IAAI,mBAAA;QACb,mBAAO,CAAC,cAAc,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;KACzC;IAED,OAAO,EAAE,CAAC;AACZ,CAAC;AARD,8BAQC;AAED;;;;;;;;GAQG;AACH,wBAAqC,EAAK,EAAE,IAAO,EAAE,IAAY;IAC/D,IAAM,UAAU,GAAG,MAAM,CAAC,wBAAwB,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;IAE7D,IAAI,CAAC,UAAU,IAAI,UAAU,CAAC,YAAY,EAAE;QAC1C,IAAM,aAAa,GAAG,MAAM,CAAC,wBAAwB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAElE,IAAI,aAAa,IAAI,oBAAQ,CAAC,aAAa,CAAC,EAAE;YAC5C,MAAM,CAAC,cAAc,CAAC,EAAE,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;SAChD;aAAM;YACJ,EAAU,CAAC,IAAI,CAAC,GAAI,IAAY,CAAC,IAAI,CAAC,CAAC;SACzC;KACF;AACH,CAAC;AAZD,wCAYC","sourcesContent":["import { without, attempt, isObject } from 'lodash-es';\r\n/**\r\n * Assigns all properties from an object to another object including non enumerable\r\n * properties.\r\n * @export\r\n * @template T\r\n * @template U\r\n * @param {T} to\r\n * @param {U} from\r\n * @param {string[]} [excludes=[]]\r\n * @returns {T}\r\n */\r\nexport function assignAll<T, U>(to: T, from: U, excludes: string[] = []): T {\r\n  const properties = without(Object.getOwnPropertyNames(from), ...excludes);\r\n\r\n  for (const prop of properties) {\r\n    attempt(assignProperty, to, from, prop);\r\n  }\r\n\r\n  return to;\r\n}\r\n\r\n/**\r\n * Assigns a property from one object to another while retaining descriptor properties.\r\n * @export\r\n * @template T\r\n * @template U\r\n * @param {T} to\r\n * @param {U} from\r\n * @param {string} prop\r\n */\r\nexport function assignProperty<T, U>(to: T, from: U, prop: string): void {\r\n  const descriptor = Object.getOwnPropertyDescriptor(to, prop);\r\n\r\n  if (!descriptor || descriptor.configurable) {\r\n    const srcDescriptor = Object.getOwnPropertyDescriptor(from, prop);\r\n\r\n    if (srcDescriptor && isObject(srcDescriptor)) {\r\n      Object.defineProperty(to, prop, srcDescriptor);\r\n    } else {\r\n      (to as any)[prop] = (from as any)[prop];\r\n    }\r\n  }\r\n}\r\n"]}