{"version":3,"file":"before.js","sourceRoot":"","sources":["../src/before.ts"],"names":[],"mappings":";;AAAA,uCAAmC;AAEnC,qCAA+E;AAC/E,6CAAoD;AAEpD,IAAM,SAAS,GAAG,0BAAgB,CAAC,uBAAuB,CACxD,IAAI,yBAAe,CAAC,kBAAM,EAAE,IAAI,iCAAmB,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CACzE,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,gBAAuB,CAAS;IAC9B,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC;AAFD,wBAEC;AACkB,wBAAM;AACzB,kBAAe,SAAS,CAAC","sourcesContent":["import { before } from 'lodash-es';\r\n\r\nimport { DecoratorConfig, DecoratorFactory, LodashDecorator } from './factory';\r\nimport { PostValueApplicator } from './applicators';\r\n\r\nconst decorator = DecoratorFactory.createInstanceDecorator(\r\n  new DecoratorConfig(before, new PostValueApplicator(), { setter: true })\r\n);\r\n\r\n/**\r\n * Creates a function that invokes func, with the this binding and arguments of the created function, while it's called less than n times.\r\n * Subsequent calls to the created function return the result of the last func invocation.\r\n * @param {number} n The number of calls at whichc func is no longer invoked.\r\n * @example\r\n *\r\n * let calls = 0;\r\n *\r\n * class MyClass {\r\n *   @Before(3)\r\n *   fn() {\r\n *     calls++;\r\n *   }\r\n * }\r\n *\r\n * const myClass = new MyClass();\r\n *\r\n * myClass.fn();\r\n * myClass.fn();\r\n * myClass.fn();\r\n * myClass.fn();\r\n *\r\n * calls === 2; // => true\r\n */\r\nexport function Before(n: number): LodashDecorator {\r\n  return decorator(n);\r\n}\r\nexport { Before as before };\r\nexport default decorator;\r\n"]}