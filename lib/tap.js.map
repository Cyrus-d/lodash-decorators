{"version":3,"file":"tap.js","sourceRoot":"","sources":["../src/tap.ts"],"names":[],"mappings":";;AAAA,qCAAsF;AACtF,6CAAmD;AACnD,iCAAwC;AAExC;;;GAGG;AACU,QAAA,GAAG,GAAG,0BAAgB,CAAC,eAAe,CACjD,IAAI,yBAAe,CAAC,UAAC,EAAY,IAAK,OAAA,qBAAa,CAAC,EAAE,EAAE,CAAC,CAAC,EAApB,CAAoB,EAAE,IAAI,gCAAkB,EAAE,EAAE,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CACtF,CAAC;AACZ,cAHH,WAAG,CAGG;AACnB,kBAAe,WAAG,CAAC","sourcesContent":["import { DecoratorConfig, DecoratorFactory, BiTypedMethodDecorator } from './factory';\r\nimport { PreValueApplicator } from './applicators';\r\nimport { returnAtIndex } from './utils';\r\n\r\n/**\r\n * Returns the first argument from the function regardless of\r\n * the decorated functions return value.\r\n */\r\nexport const Tap = DecoratorFactory.createDecorator(\r\n  new DecoratorConfig((fn: Function) => returnAtIndex(fn, 0), new PreValueApplicator(), { optionalParams: true })\r\n) as BiTypedMethodDecorator;\r\nexport { Tap as tap };\r\nexport default Tap;\r\n"]}