{"version":3,"file":"flip.js","sourceRoot":"","sources":["../src/flip.ts"],"names":[],"mappings":";;AAAA,uCAAiC;AACjC,qCAKmB;AACnB,6CAAuD;AAEvD,IAAM,SAAS,GAAG,0BAAgB,CAAC,uBAAuB,CACxD,IAAI,yBAAe,CAAC,gBAAI,EAAE,IAAI,oCAAsB,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAC5E,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,cAAqB,EAAuB;IAC1C,OAAO,SAAS,CAAC,EAAE,CAAC,CAAC;AACvB,CAAC;AAFD,oBAEC;AACgB,oBAAI;AACrB,kBAAe,SAAS,CAAC","sourcesContent":["import { flip } from 'lodash-es';\r\nimport {\r\n  DecoratorConfig,\r\n  DecoratorFactory,\r\n  LodashDecorator,\r\n  ResolvableFunction\r\n} from './factory';\r\nimport { PartialValueApplicator } from './applicators';\r\n\r\nconst decorator = DecoratorFactory.createInstanceDecorator(\r\n  new DecoratorConfig(flip, new PartialValueApplicator(), { property: true })\r\n);\r\n\r\n/**\r\n * Creates a function that invokes func with arguments reversed. Honestly, there is probably not much\r\n * use for this decorator but maybe you will find one?\r\n *\r\n * @example\r\n *\r\n * class MyClass {\r\n *   value = 100;\r\n *\r\n *   @Flip('fn')\r\n *   fn2: (b: number, a: string) => [ number, string ];\r\n *\r\n *   fn(a: string, b: number): [ string, number ] {\r\n *     return [ a, b ];\r\n *   }\r\n * }\r\n *\r\n * const myClass = new MyClass();\r\n *\r\n * myClass.fn2(10, '20'); // => [ '20', 10 ]\r\n */\r\nexport function Flip(fn?: ResolvableFunction): LodashDecorator {\r\n  return decorator(fn);\r\n}\r\nexport { Flip as flip };\r\nexport default decorator;\r\n"]}