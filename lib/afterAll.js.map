{"version":3,"file":"afterAll.js","sourceRoot":"","sources":["../src/afterAll.ts"],"names":[],"mappings":";;AAAA,uCAAkC;AAClC,qCAA+E;AAC/E,6CAAoD;AAEpD,IAAM,SAAS,GAAG,0BAAgB,CAAC,eAAe,CAChD,IAAI,yBAAe,CAAC,iBAAK,EAAE,IAAI,iCAAmB,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CACxE,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;GAqBG;AACH,kBAAyB,CAAS;IAChC,OAAO,SAAS,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC;AAFD,4BAEC;AACoB,4BAAQ;AAC7B,kBAAe,SAAS,CAAC","sourcesContent":["import { after } from 'lodash-es';\r\nimport { DecoratorConfig, DecoratorFactory, LodashDecorator } from './factory';\r\nimport { PostValueApplicator } from './applicators';\r\n\r\nconst decorator = DecoratorFactory.createDecorator(\r\n  new DecoratorConfig(after, new PostValueApplicator(), { setter: true })\r\n);\r\n\r\n/**\r\n * The opposite of Before. This method creates a function that invokes once it's called n or more times.\r\n * This spans across all instances of the class instead of the instance.\r\n * @param {number} n The number of calls before the function is invoked.\r\n * @example\r\n *\r\n * class MyClass {\r\n *   @AfterAll(2)\r\n *   fn() {\r\n *     return 10;\r\n *   }\r\n * }\r\n *\r\n * const myClass = new MyClass();\r\n * const myClass2 = new MyClass();\r\n *\r\n * myClass.fn(); // => undefined\r\n * myClass.fn(); // => 10\r\n *\r\n * myClass2.fn(); // => 10\r\n * myClass2.fn(); // => 10\r\n */\r\nexport function AfterAll(n: number): LodashDecorator {\r\n  return decorator(n);\r\n}\r\nexport { AfterAll as afterAll };\r\nexport default decorator;\r\n"]}