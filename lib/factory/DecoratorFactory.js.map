{"version":3,"file":"DecoratorFactory.js","sourceRoot":"","sources":["../../src/factory/DecoratorFactory.ts"],"names":[],"mappings":"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","sourcesContent":["import { isFunction } from 'lodash-es';\r\nimport {\r\n  InstanceChainMap,\r\n  LodashDecorator,\r\n  InstanceChainContext\r\n} from './common';\r\nimport { DecoratorConfig } from './DecoratorConfig';\r\nimport {\r\n  copyMetadata,\r\n  bind,\r\n  isMethodOrPropertyDecoratorArgs,\r\n  isPrototypeAccess\r\n} from '../utils';\r\n\r\nexport type GenericDecorator = (...args: any[]) => LodashDecorator;\r\n\r\nexport class InternalDecoratorFactory {\r\n  createDecorator(config: DecoratorConfig): GenericDecorator {\r\n    const { applicator, optionalParams } = config;\r\n\r\n    return (...args: any[]): LodashDecorator => {\r\n      let params = args;\r\n\r\n      const decorator = (target: Object, name: string, _descriptor?: PropertyDescriptor): PropertyDescriptor => {\r\n        const descriptor = this._resolveDescriptor(target, name, _descriptor);\r\n        const { value, get, set } = descriptor;\r\n\r\n        // If this decorator is being applied after an instance decorator we simply ignore it\r\n        // as we can't apply it correctly.\r\n        if (!InstanceChainMap.has([target, name])) {\r\n          if (isFunction(value)) {\r\n            descriptor.value = copyMetadata(applicator.apply({ config, target, value, args: params }), value);\r\n          } else if (isFunction(get) && config.getter) {\r\n            descriptor.get = copyMetadata(applicator.apply({ config, target, value: get, args: params }), get);\r\n          } else if (isFunction(set) && config.setter) {\r\n            descriptor.set = copyMetadata(applicator.apply({ config, target, value: set, args: params }), set);\r\n          }\r\n        }\r\n\r\n        return descriptor;\r\n      };\r\n\r\n      if (optionalParams && isMethodOrPropertyDecoratorArgs(...args)) {\r\n        params = [];\r\n\r\n        return decorator(args[0], args[1], args[2]) as any;\r\n      }\r\n\r\n      return decorator;\r\n    };\r\n  }\r\n\r\n  createInstanceDecorator(config: DecoratorConfig): GenericDecorator {\r\n    const { applicator, bound, optionalParams } = config;\r\n\r\n    return (...args: any[]): LodashDecorator => {\r\n      let params = args;\r\n      const decorator = (target: Object, name: string, _descriptor?: PropertyDescriptor): PropertyDescriptor => {\r\n        const descriptor = this._resolveDescriptor(target, name, _descriptor);\r\n        const { value, writable, enumerable, configurable, get, set } = descriptor;\r\n        const isFirstInstance = !InstanceChainMap.has([target, name]);\r\n        const chainData = InstanceChainMap.get([target, name]) || { fns: [], properties: [] };\r\n        const isGetter = isFirstInstance && isFunction(get);\r\n        const isSetter = isFirstInstance && isFunction(set);\r\n        const isMethod = isFirstInstance && isFunction(value);\r\n        const isProperty = isFirstInstance && !isGetter && !isSetter && !isMethod;\r\n        const baseValue = isGetter ? get : isMethod ? value : undefined;\r\n\r\n        chainData.properties.push(name);\r\n        chainData.fns.push((fn: Function, instance: any, context: InstanceChainContext) => {\r\n          if (!this._isApplicable(context, config)) {\r\n            return fn;\r\n          }\r\n\r\n          if (bound) {\r\n            fn = bind(fn, instance);\r\n          }\r\n\r\n          return copyMetadata(\r\n            applicator.apply({ args: params, target, instance, value: fn, config }),\r\n            fn\r\n          );\r\n        });\r\n\r\n        InstanceChainMap.set([target, name], chainData);\r\n\r\n        if (!isFirstInstance) {\r\n          return descriptor;\r\n        }\r\n\r\n        chainData.isSetter = isSetter;\r\n        chainData.isGetter = isGetter;\r\n        chainData.isMethod = isMethod;\r\n        chainData.isProperty = isProperty;\r\n\r\n        const applyChain = (fn: any, context: InstanceChainContext, instance: any) => {\r\n          return chainData.fns.reduce((result: Function, next: Function) => next(result, instance, context), fn);\r\n        };\r\n\r\n        const applyDecorator = (instance: any) => {\r\n          let getter = get || undefined;\r\n          let setter = set || undefined;\r\n\r\n          if (isGetter || isSetter) {\r\n            // If we have a getter apply the decorators to the getter and assign it to the instance.\r\n            if (isGetter) {\r\n              getter = applyChain(get, { value: get, getter: true }, instance);\r\n            }\r\n\r\n            if (isSetter) {\r\n              setter = applyChain(set, { value: set, setter: true }, instance);\r\n            }\r\n\r\n            Object.defineProperty(instance, name, {\r\n              enumerable,\r\n              // tslint:disable-next-line:object-literal-sort-keys\r\n              configurable,\r\n              get: getter,\r\n              set: setter\r\n            });\r\n          } else if (isMethod || isProperty) {\r\n            const newFn = isMethod\r\n              ? applyChain(value, { value, method: true }, instance)\r\n              : applyChain(value, { value, property: true }, instance);\r\n\r\n            Object.defineProperty(instance, name, {\r\n              writable,\r\n              // tslint:disable-next-line:object-literal-sort-keys\r\n              enumerable,\r\n              configurable,\r\n              value: newFn\r\n            });\r\n          }\r\n        };\r\n\r\n        if (isMethod || isProperty) {\r\n          delete descriptor.value;\r\n          delete descriptor.writable;\r\n        }\r\n\r\n        descriptor.get = function() {\r\n          // Check for direct access on the prototype.\r\n          // MyClass.prototype.fn <-- This should not apply the decorator.\r\n          if (isPrototypeAccess(this, target)) {\r\n            return baseValue;\r\n          }\r\n\r\n          applyDecorator(this);\r\n\r\n          // tslint:disable-next-line:no-shadowed-variable\r\n          const descriptor = Object.getOwnPropertyDescriptor(this, name)!;\r\n\r\n          if (descriptor.get) {\r\n            return descriptor.get.call(this);\r\n          }\r\n\r\n          return descriptor.value;\r\n        };\r\n\r\n        // tslint:disable-next-line:no-shadowed-variable\r\n        descriptor.set = function(value) {\r\n          applyDecorator(this);\r\n\r\n          // tslint:disable-next-line:no-shadowed-variable\r\n          const descriptor = Object.getOwnPropertyDescriptor(this, name)!;\r\n\r\n          if (descriptor.set) {\r\n            descriptor.set.call(this, value);\r\n          } else if (isProperty || isMethod) {\r\n            this[name] = value;\r\n          }\r\n        };\r\n\r\n        return descriptor;\r\n      };\r\n\r\n      if (optionalParams && isMethodOrPropertyDecoratorArgs(...args)) {\r\n        params = [];\r\n\r\n        return decorator(args[0], args[1], args[2]) as any;\r\n      }\r\n\r\n      return decorator;\r\n    };\r\n  }\r\n\r\n  private _isApplicable(context: InstanceChainContext, config: DecoratorConfig): boolean {\r\n    return !Boolean(\r\n      context.getter && !config.getter\r\n      || context.setter && !config.setter\r\n      || context.method && !config.method\r\n      || context.property && !config.property\r\n    );\r\n  }\r\n\r\n  private _resolveDescriptor(target: Object, name: string, descriptor?: PropertyDescriptor): PropertyDescriptor {\r\n    if (descriptor) {\r\n      return descriptor;\r\n    }\r\n\r\n    return Object.getOwnPropertyDescriptor(target, name) || {};\r\n  }\r\n}\r\n\r\nexport const DecoratorFactory = new InternalDecoratorFactory();\r\n"]}