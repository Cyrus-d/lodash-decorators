{"version":3,"file":"defer.js","sourceRoot":"","sources":["../src/defer.ts"],"names":[],"mappings":";;AAAA,uCAAkC;AAClC,qCAAiF;AACjF,6CAAiD;AAEjD;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACU,QAAA,KAAK,GAAG,0BAAgB,CAAC,eAAe,CACnD,IAAI,yBAAe,CAAC,iBAAK,EAAE,IAAI,8BAAgB,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CACtE,CAAC;AACL,gBAHL,aAAK,CAGK;AACvB,kBAAe,aAAK,CAAC","sourcesContent":["import { defer } from 'lodash-es';\r\nimport { DecoratorConfig, DecoratorFactory, BiTypedDecoratorN } from './factory';\r\nimport { InvokeApplicator } from './applicators';\r\n\r\n/**\r\n * Defers invoking the func until the current call stack has cleared. Any additional arguments are provided to func when it's invoked.\r\n *\r\n * @param {...*} [args] Additional arguments to invoke the function with\r\n * @example\r\n *\r\n * class MyClass {\r\n *   value = 100;\r\n *\r\n *   @Defer()\r\n *   add(a) {\r\n *     this.value += a;\r\n *   }\r\n * }\r\n *\r\n * const myClass = new MyClass();\r\n *\r\n * myClass.add(10);\r\n *\r\n * myClass.value; // => 100;\r\n *\r\n * setTimeout(() => {\r\n *   myClass.value; // => 110;\r\n * }, 0);\r\n */\r\nexport const Defer = DecoratorFactory.createDecorator(\r\n  new DecoratorConfig(defer, new InvokeApplicator(), { setter: true, optionalParams: true })\r\n) as BiTypedDecoratorN;\r\nexport { Defer as defer };\r\nexport default Defer;\r\n"]}