{"version":3,"file":"onceAll.js","sourceRoot":"","sources":["../src/onceAll.ts"],"names":[],"mappings":";;AAAA,uCAAiC;AACjC,qCAAgF;AAChF,6CAAmD;AAEnD;;;;;;;;;;;;;;;;;;GAkBG;AACU,QAAA,OAAO,GAAG,0BAAgB,CAAC,eAAe,CACrD,IAAI,yBAAe,CAAC,gBAAI,EAAE,IAAI,gCAAkB,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CACxE,CAAC;AACF,kBAHP,eAAO,CAGO;AAC3B,kBAAe,eAAO,CAAC","sourcesContent":["import { once } from 'lodash-es';\r\nimport { DecoratorConfig, DecoratorFactory, BiTypedDecorator } from './factory';\r\nimport { PreValueApplicator } from './applicators';\r\n\r\n/**\r\n * Creates a function that is restricted to invoking func once. Repeat calls to the function return the value of the first invocation.\r\n * This is shared across all instances of the class.\r\n * @example\r\n * const value = 0;\r\n *\r\n * class MyClass {\r\n *   @Once()\r\n *   fn(): number {\r\n *     return ++value;\r\n *   }\r\n * }\r\n *\r\n * const myClass = new MyClass();\r\n * const myClass2 = new MyClass();\r\n *\r\n * myClass.fn(); //=> 1\r\n * myClass2.fn(); //=> 1\r\n */\r\nexport const OnceAll = DecoratorFactory.createDecorator(\r\n  new DecoratorConfig(once, new PreValueApplicator(), { setter: true, optionalParams: true })\r\n) as BiTypedDecorator;\r\nexport { OnceAll as onceAll };\r\nexport default OnceAll;\r\n"]}