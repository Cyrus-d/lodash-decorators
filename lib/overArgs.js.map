{"version":3,"file":"overArgs.js","sourceRoot":"","sources":["../src/overArgs.ts"],"names":[],"mappings":";;AAAA,uCAAqC;AACrC,qCAAqF;AACrF,6CAAmD;AAEnD,IAAM,SAAS,GAAG,0BAAgB,CAAC,eAAe,CAChD,IAAI,yBAAe,CAAC,oBAAQ,EAAE,IAAI,gCAAkB,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAC1E,CAAC;AAEF;;;;;;;;;;;;;;;;;GAiBG;AACH;IAAyB,oBAAyB;SAAzB,UAAyB,EAAzB,qBAAyB,EAAzB,IAAyB;QAAzB,+BAAyB;;IAChD,OAAO,SAAS,eAAI,UAAU,EAAE;AAClC,CAAC;AAFD,4BAEC;AACoB,4BAAQ;AAC7B,kBAAe,SAAS,CAAC","sourcesContent":["import { overArgs } from 'lodash-es';\r\nimport { DecoratorConfig, DecoratorFactory, LodashMethodDecorator } from './factory';\r\nimport { PreValueApplicator } from './applicators';\r\n\r\nconst decorator = DecoratorFactory.createDecorator(\r\n  new DecoratorConfig(overArgs, new PreValueApplicator(), { setter: true })\r\n);\r\n\r\n/**\r\n * Creates a function that invokes func with its arguments transformed.\r\n * @export\r\n * @param {...Function[]} transforms\r\n * @returns {LodashMethodDecorator}\r\n * @example\r\n * class MyClass {\r\n *   @OverArgs(_.castArray)\r\n *   fn(list) {\r\n *     return list;\r\n *   }\r\n * }\r\n *\r\n * const myClass = new MyClass();\r\n *\r\n * myClass.fn([ 1 ]); //=> [ 1 ];\r\n * myClass.fn(1); //=> [ 1 ];\r\n */\r\nexport function OverArgs(...transforms: Function[]): LodashMethodDecorator {\r\n  return decorator(...transforms);\r\n}\r\nexport { OverArgs as overArgs };\r\nexport default decorator;\r\n"]}